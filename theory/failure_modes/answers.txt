1. A) A race condition is when two processes use the same memory location and one of them writes to it. If they are out of symc the value will change when it should not for one of the processes. A race condition causes variable output because it will change depending on the order the instructions are executed.  
   B) Strangled scaling occurs when Locks are used and they bottleneck the speed of the task. This can be detected by examining the runtime of the task. 
   C) Deadlock occurs when two or more processes are waiting for eachother to complete. This can be detected if the program doesnt end or times out. 

2. Load imbalance is when one process takes longer than others so the parallel time is constrained by that time. This does not affect the speedup formula because it used the running time to calculate speedup and did not assume even distribution among pocesses. This does complicate the efficiency calculation because the efficiency vs number of workers graph would appear to top out much quicker than expected because if we have 8 serializable tasks we would expect the greatest speedup to increase until we have 8 cores, however if the one task that takes longer takes the same amount of time on once core as three cores running the other 7 tasks then the speedup will be the same at 4-8 cores which will make efficiency stop increasing with greter than 4 cores. 
